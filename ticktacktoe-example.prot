$$ SEKCJA DEKLARACJI STRUKTUR $$

struct Board {
    leftTop: char;
    midTop: char;
    rightTop: char;

    leftMid: char;
    midMid: char;
    rightMid: char;

    leftBot: char;
    midBot: char;
    rightBot: char;
};


$$ SEKCJA DEKLARACJI ZMIENNYCH GLOBALNYCH $$

const X: char = 'X';
const O: char = 'O';
const EMPTY: char = ' ';

var board: Board = {
    leftTop: EMPTY, midTop: EMPTY, rightTop: EMPTY,
    leftMid: EMPTY, midMid: EMPTY, rightMid: EMPTY,
    leftBot: EMPTY, midBot: EMPTY, rightBot: EMPTY,
};

$ whose turn is it? Player X or O, X starts
var player: char = X;


$$ SEKCJA DEFINICJI FUNKCJI $$

fn printBoard() -> void {
    << board.leftTop << '|' << board.midTop << '|' << board.rightTop << '\n';
    << board.leftMid << '|' << board.midMid << '|' << board.rightMid << '\n';
    << board.leftBot << '|' << board.midBot << '|' << board.rightBot << '\n';
}

fn getPlayerMove() -> bool {

    var move: int = 0;

    while move == 0 {
        var choice: int = 0;
        << "Choose your move (must be an integer from 1 to 9 indexing board fileds from leftTop to rightBot): ";
        >> choice;

        for i in 1 until 10 {
            if choice == i {
                move = choice;
            }
        }
    }

    return move;
}

$ Makes a move in a first empty field encoutered
fn getAIMove() -> int {
    if board.leftTop == EMPTY { return 1; }
    if board.midTop == EMPTY { return 2; }
    if board.rightTop == EMPTY { return 3; }
    if board.leftMid == EMPTY { return 4; }
    if board.midMid == EMPTY { return 5; }
    if board.rightMid == EMPTY { return 6; }
    if board.leftBot == EMPTY { return 7; }
    if board.midBot == EMPTY { return 8; }
    if board.rightBot == EMPTY { return 9; }
    
    << "Error: no empty fields on the board!";
    return 0;
}

fn makeMove(move: int) -> void {
    if move == 1 { board.leftTop = player; }
    elif move == 2 { board.midTop = player; }
    elif move == 3 { board.rightTop = player; }
    elif move == 4 { board.leftMid = player; }
    elif move == 5 { board.midMid = player; }
    elif move == 6 { board.rightMid = player; }
    elif move == 7 { board.leftBot = player; }
    elif move == 8 { board.midBot = player; }
    elif move == 9 { board.rightBot = player; }
    else { << "Error: invalid move!"; }
}

fn nextPlayer() -> void {
    if player == X {
        player = O;
    } else {
        player = X;
    }
}

fn isGameOver() -> bool {
    return (board.leftTop == board.midTop && board.midTop == board.rightTop && board.leftTop != EMPTY) ||
           (board.leftMid == board.midMid && board.midMid == board.rightMid && board.leftMid != EMPTY) ||
           (board.leftBot == board.midBot && board.midBot == board.rightBot && board.leftBot != EMPTY) ||
           (board.leftTop == board.leftMid && board.leftMid == board.leftBot && board.leftTop != EMPTY) ||
           (board.midTop == board.midMid && board.midMid == board.midBot && board.midTop != EMPTY) ||
           (board.rightTop == board.rightMid && board.rightMid == board.rightBot && board.rightTop != EMPTY) ||
           (board.leftTop == board.midMid && board.midMid == board.rightBot && board.leftTop != EMPTY) ||
           (board.rightTop == board.midMid && board.midMid == board.leftBot && board.rightTop != EMPTY);
}

fn isDraw() -> bool {
    $ Copy the board
    var board: Board = board;

    $ Fill the board with current player's symbol
    if board.leftTop == EMPTY { board.leftTop = player; }
    if board.midTop == EMPTY { board.midTop = player; }
    if board.rightTop == EMPTY { board.rightTop = player; }
    if board.leftMid == EMPTY { board.leftMid = player; }
    if board.midMid == EMPTY { board.midMid = player; }
    if board.rightMid == EMPTY { board.rightMid = player; }
    if board.leftBot == EMPTY { board.leftBot = player; }
    if board.midBot == EMPTY { board.midBot = player; }
    if board.rightBot == EMPTY { board.rightBot = player; }

    $ Check if the game is over
    if isGameOver() {
        return false;
    }

    return true;
}


$$ SEKCJA DEFINICJI FUNKCJI MAIN $$

fn main() -> void {
    while true {
        printBoard();

        var move: int = 0;

        if player == X {
            move = getPlayerMove();
        } else {
            move = getAIMove();
        }

        makeMove(move);

        if isGameOver() {
            printBoard();
            << "Player " << player << " won!\n";
            break;
        } elif isDraw() {
            printBoard();
            << "Draw!\n";
            break;
        }

        nextPlayer();
    }
}
