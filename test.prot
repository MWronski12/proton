$ Variant tests

variant Number { int, float };

const PI: Number = 3.14;
var age: Number = PI;

var x: float = age as float;

variant Wrapper { string, Number };

fn stringifyNumber(wrapper: Wrapper) -> string {
	match wrapper {
		case string -> { return wrapper as string; }
		case Number -> {
			match wrapper as Number {
				case int -> {
					var num: Number = wrapper as Number;
					var integer: int = num as int;
					return string(integer); 
				}
				case float -> { 
					var num: Number = wrapper as Number;
					var floating: float = num as float;
					return string(floating); 
				}
			}
		}
	}
}

$ Struct tests

struct Point {
	x: Number;
	y: Number;
};

const point: Point = { x: 1, y: 2 };

struct Coords {
	lat: Number;
	lng: Number;
};

struct City {
	name: string;
	coords: Coords;
};

const warsaw: City = {
	name: "Warsaw",
	coords: { lat: 52.2297, lng: 21.0122 },
};

fn stringifyCoords(coords: Coords) -> string {
	var result: string = "";

	result = result + string(coords.lat as float);
	result = result + ", ";
	result = result + string(coords.lng as float);
	return result;
}

$ Function tests

fn pow(x: int, n: int) -> int {
	var result: int = 1;
	for i in 0 until n {
		result = result * x;
	}
	return result;
}

fn main() -> void {
	const x: int = 3;
	const n: int = 2;
                       
	var result: int = pow(x, n);

	while true {
		var input: string = "";
		>> input;
		if input == "exit" { break; }
		elif input == "continue" { continue; }

		<< "Your input: " << input;
	}

	<< x << " to power " << n << " = " << pow(x, n) << "\n";

	return;
}
